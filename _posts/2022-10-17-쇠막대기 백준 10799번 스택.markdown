---
title: 쇠막대기 백준 10799번 스택
date:   2022-10-17 15:50:30 +0900
categories: [Coding_Test, 백준]
tags: [coding, python, algorithm, stack]
---

저는 카카오톡이 터진것보다 티스토리 접속이 안되어서 보니 카카오 서비스가 다터져있는거를 발견을 했는데... 역시 무료에다가 비주류 서비스라고 그러는지 티스토리는 모바일페이지로 무조건 리다이렉트 걸어버리고 스킨은 제대로 나오지도 않는군요. 티스토리도 사실 불안불안해서 언젠가는 이사를 해야겠다고 마음을 먹었는데 이번 기회로 취뽀하면 바로 블로그 부터 이사를 해야 겠습니다. 이 블로그는 아마 깃으로 가지 않을까 합니다. 워드프레스나 블로그스팟전에 하다가 말았는데.... 또 문제 생기기전에 옮겨야 겠습니다.

[https://www.acmicpc.net/problem/10799](https://www.acmicpc.net/problem/10799)

문제
 

여러 개의 쇠막대기를 레이저로 절단하려고 한다. 효율적인 작업을 위해서 쇠막대기를 아래에서 위로 겹쳐 놓고, 레이저를 위에서 수직으로 발사하여 쇠막대기들을 자른다. 쇠막대기와 레이저의 배치는 다음 조건을 만족한다.

* 쇠막대기는 자신보다 긴 쇠막대기 위에만 놓일 수 있다. - 쇠막대기를 다른 쇠막대기 위에 놓는 경우 완전히 포함되도록 놓되, 끝점은 겹치지 않도록 놓는다.  
* 각 쇠막대기를 자르는 레이저는 적어도 하나 존재한다.  
* 레이저는 어떤 쇠막대기의 양 끝점과도 겹치지 않는다.   

아래 그림은 위 조건을 만족하는 예를 보여준다. 수평으로 그려진 굵은 실선은 쇠막대기이고, 점은 레이저의 위치, 수직으로 그려진 점선 화살표는 레이저의 발사 방향이다.

![img1 daumcdn](https://user-images.githubusercontent.com/85277660/211185789-a037a7b0-8a67-4e21-bc4e-f7857dc881bd.png)

이러한 레이저와 쇠막대기의 배치는 다음과 같이 괄호를 이용하여 왼쪽부터 순서대로 표현할 수 있다.

* 레이저는 여는 괄호와 닫는 괄호의 인접한 쌍 ‘( ) ’ 으로 표현된다. 또한, 모든 ‘( ) ’는 반드시 레이저를 표현한다.
* 쇠막대기의 왼쪽 끝은 여는 괄호 ‘ ( ’ 로, 오른쪽 끝은 닫힌 괄호 ‘) ’ 로 표현된다. 
위 예의 괄호 표현은 그림 위에 주어져 있다.

쇠막대기는 레이저에 의해 몇 개의 조각으로 잘려지는데, 위 예에서 가장 위에 있는 두 개의 쇠막대기는 각각 3개와 2개의 조각으로 잘려지고, 이와 같은 방식으로 주어진 쇠막대기들은 총 17개의 조각으로 잘려진다. 쇠막대기와 레이저의 배치를 나타내는 괄호 표현이 주어졌을 때, 잘려진 쇠막대기 조각의 총 개수를 구하는 프로그램을 작성하시오.

처음에는 앞에서 부터 자르는 순간마다 계산을 하면 되지 않을까 했습니다. 그런데 문제는 맨위에 있는 것 처럼 두개가 따로 나오면 +1을 해야하는데 계산하기가 너무 어려웠고 그러면 각 막대가 몇번 절단됬는지 보면 되지 않을까로 생각 했습니다.

그러니까 맨 밑에 있는 긴 막대는 4번 잘렸으니 5개 두번째도 4번 잘렸으니 4개 두번 잘린것은 1개이니 3개 1번 잘린 것은 두개이니 4개해서 5+5+3+2+2 = 17 정답이 나옵니다. 이제 그러면 어떻게 구현하는지 봅시다.

```py
string = str(input())
count = 0
stack = []
for i in range(len(string)):
    if string[i]=='(':
        stack.append(1)
    else:
        if string[i-1]=='(':
            stack.pop()
            for j in range(len(stack)):
                stack[j]+=1
        else:
            count += stack.pop()
print(count)
```

생각보다 쉽게 문제를 풀수 있습니다.

"(" 쇠막대기가 하나 들어오면 스택에다가 1을 추가를 해줍니다. 그리고 ")" 이게 올때 절단기인지 쇠막대기의 끝인지 구분을 하고 그에 따라서 작동을 하는데 코드가 돌아가는 과정은 대략 아래와 같습니다.

```
()(((()())(())()))(())
```

이것을 기준으로 보았을때 맨 처음 있는 절단기는 넘어가고 쇠막대기 3개가 놓여 집니다.

그러면 스택에 1,1,1이 들어가게 되고 절단이 두번일어나는데 절단이 일어날때마다 쇠막대기의 카운트를 1씩 늘려줍니다.

스택에 [3,3,3]이 들어가게 됩니다.

그 다음 쇠막대기 하나가 빠지게 되니 count에 3을 더해주고 새로운 막대기를 놓습니다.

[3,3,1]이 되고 여기서 절단이 한번더 발생하니 [4,4,2]가 되고 여기서 막대기가 또 빠지니 count에는 2가 더해집니다.

 

그 다음 절단기가 또 돌게되고 둘다 빠지게 되면 [5,5]에서 count에는 5가 두번 더해집니다.

 

마지막으로 막대기 하나 놓고 절단하고 더하니 2를 추가

 

즉 3+2+5+5+2 = 17 정답을 구할 수 있습니다.

![img1 daumcdn](https://user-images.githubusercontent.com/85277660/211185809-a51e5660-9e02-491c-854a-db5683623c6f.png)

다만 파이썬으로 풀면 시간초과가 나옵니다.

이제 이걸로 스택을 마무리하고 BFS/DFS문제로 넘어가겠습니다.