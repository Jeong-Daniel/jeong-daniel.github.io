---
title: 미로 탐색 백준 2178번 BFS
date:   2022-10-18 14:37:30 +0900
categories: [Coding_Test, 백준]
tags: [coding, python, algorithm, bfs]
---

[https://www.acmicpc.net/problem/2178](https://www.acmicpc.net/problem/2178)

문제
N×M크기의 배열로 표현되는 미로가 있다.

```
1 0 1 1 1 1
1 0 1 0 1 0
1 0 1 0 1 1
1 1 1 0 1 1
```

미로에서 1은 이동할 수 있는 칸을 나타내고, 0은 이동할 수 없는 칸을 나타낸다. 이러한 미로가 주어졌을 때, (1, 1)에서 출발하여 (N, M)의 위치로 이동할 때 지나야 하는 최소의 칸 수를 구하는 프로그램을 작성하시오. 한 칸에서 다른 칸으로 이동할 때, 서로 인접한 칸으로만 이동할 수 있다.

위의 예에서는 15칸을 지나야 (N, M)의 위치로 이동할 수 있다. 칸을 셀 때에는 시작 위치와 도착 위치도 포함한다.

미로 찾아가는 문제입니다. 그리고 어느까지의 거리나 최단거리를 찾기 위해서는 BFS를 사용해야 합니다. 이전과는 같으면서도 약간 다릅니다.

```py
n, m = map(int,input().split())
map_list = []
for i in range(n):
    append_list = []
    temp = str(input())
    for j in range(m):
        append_list.append(int(temp[j]))
    map_list.append(append_list)

from collections import deque
vist = [[0]*m for _ in range(n)]
queue = deque()
queue.append([0,0])
vist[0][0] = 1
dx = [0,0,1,-1]
dy = [1,-1,0,0]

while queue:
    curr = queue.popleft()
    for k in range(4):
        nx = curr[0] + dx[k]
        ny = curr[1] + dy[k]
        if nx >= n or nx < 0 or ny >= m or ny < 0:
            continue
        if vist[nx][ny] or map_list[nx][ny]!=1:
            continue
        queue.append([nx,ny])
        vist[nx][ny] = vist[curr[0]][curr[1]]+1
    
print(vist[n-1][m-1])
```

약간 다르다는거는 다름아니라 거리를 계산할때 이전위치에다가 +1을 더한만큼만 계산을 하면 됩니다. 이렇게 안하고 따로 숫자를 관리했더니 중복계산이 되어서 틀렸습니다 보고 한참을 뭐가 문제인지 봤네요