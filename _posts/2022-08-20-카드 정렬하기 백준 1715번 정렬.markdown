---
title: 카드 정렬하기 백준 1715번 정렬
date:   2022-08-20 14:41:30 +0900
categories: [Coding_Test, 백준]
tags: [coding, python, algorithm, sorting]
---

[https://www.acmicpc.net/problem/1715](https://www.acmicpc.net/problem/1715)

문제
> 정렬된 두 묶음의 숫자 카드가 있다고 하자. 각 묶음의 카드의 수를 A, B라 하면 보통 두 묶음을 합쳐서 하나로 만드는 데에는 A+B 번의 비교를 해야 한다. 이를테면, 20장의 숫자 카드 묶음과 30장의 숫자 카드 묶음을 합치려면 50번의 비교가 필요하다.
> 
> 매우 많은 숫자 카드 묶음이 책상 위에 놓여 있다. 이들을 두 묶음씩 골라 서로 합쳐나간다면, 고르는 순서에 따라서 비교 횟수가 매우 달라진다. 예를 들어 10장, 20장, 40장의 묶음이 있다면 10장과 20장을 합친 뒤, 합친 30장 묶음과 40장을 합친다면 (10 + 20) + (30 + 40) = 100번의 비교가 필요하다. 그러나 10장과 40장을 합친 뒤, 합친 50장 묶음과 20장을 합친다면 (10 + 40) + (50 + 20) = 120 번의 비교가 필요하므로 덜 효율적인 방법이다.
> 
> N개의 숫자 카드 묶음의 각각의 크기가 주어질 때, 최소한 몇 번의 비교가 필요한지를 구하는 프로그램을 작성하시오.

처음에는 제일 가단하게 우선순위큐로 정렬을 해서 차례대로 누적하면 되겠다는 생각이었는데 근접했지만 마지막에 약간 잘못생각하듯 합니다.

그래도 가장 작은 크기의 두 카드 묶음을 합쳤을때 최적의 해를 보장한다는 점입니다. 가장 작은 크기의 두 묶음만 합치면 되니 그리디 알고리즘으로 분류할 수도 있습니다.


*정답은 구할 수 있지만 시간 초과가 나옵니다.

```py
import heapq
n = int(input())
card = []
for i in range(n):
    heapq.heappush(card, int(input()))
```

우선순위 큐를 사용할 것이기 때문에 heapq를 사용하고 n과 card를 받는데 이때 card는 heapq로 받습니다.

그러면 pop를 했을때 자동으로 가장 작은 숫자를 얻을 수 있습니다.

```py
result = 0
while len(card)!=1:
        small_1 = heapq.heappop(card)
        small_2 = heapq.heappop(card)
        sum_num = small_1+small_2
        result += sum_num
        heapq.heappush(card,sum_num)
print(result)
```

그리고 pop를 두번하게 되면 가장 작은 두 카드덱을 얻을 수 있고 이를 더해줍시다

마지막으로 이렇게 두개의 카드덱을 더한 것 역시 하나의 카드덱으로 취급할 수 있습니다. 그렇다면 이를 다시 우선순위 큐에 집어넣고 연산을 반복을 해줍시다. 마지막 1개가 남았을때가 최종적으로 모든 카드덱을 더했을 경우가 됩니다.