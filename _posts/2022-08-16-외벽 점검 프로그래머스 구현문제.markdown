---
title: 외벽 점검 프로그래머스 구현문제
date:   2022-08-16 17:17:10 +0900
categories: [Coding_Test, 프로그래머스]
tags: [coding, python, algorithm, simulation]
---

[https://school.programmers.co.kr/learn/courses/30/lessons/60062](https://school.programmers.co.kr/learn/courses/30/lessons/60062)

> 레스토랑을 운영하고 있는  "스카피" 는 레스토랑 내부가 너무 낡아 친구들과 함께 직접 리모델링 하기로 했습니다. 레스토랑이 있는 곳은 스노우타운으로 매우 추운 지역이어서 내부 공사를 하는 도중에 주기적으로 외벽의 상태를 점검해야 할 필요가 있습니다.
> 
> 레스토랑의 구조는 완전히 동그란 모양이고 외벽의 총 둘레는 n미터이며, 외벽의 몇몇 지점은 추위가 심할 경우 손상될 수도 있는 취약한 지점들이 있습니다. 따라서 내부 공사 도중에도 외벽의 취약 지점들이 손상되지 않았는 지, 주기적으로 친구들을 보내서 점검을 하기로 했습니다. 다만, 빠른 공사 진행을 위해 점검 시간을 1시간으로 제한했습니다. 친구들이 1시간 동안 이동할 수 있는 거리는 제각각이기 때문에, 최소한의 친구들을 투입해 취약 지점을 점검하고 나머지 친구들은 내부 공사를 돕도록 하려고 합니다. 편의 상 레스토랑의 정북 방향 지점을 0으로 나타내며, 취약 지점의 위치는 정북 방향 지점으로부터 시계 방향으로 떨어진 거리로 나타냅니다. 또, 친구들은 출발 지점부터 시계, 혹은 반시계 방향으로 외벽을 따라서만 이동합니다.
> 
> 외벽의 길이 n, 취약 지점의 위치가 담긴 배열 weak, 각 친구가 1시간 동안 이동할 수 있는 거리가 담긴 배열 dist가 매개변수로 주어질 때, 취약 지점을 점검하기 위해 보내야 하는 친구 수의 최소값을 return 하도록 solution 함수를 완성해주세요.
> 
> n은 1 이상 200 이하인 자연수입니다.
> 
> weak의 길이는 1 이상 15 이하입니다.서로 다른 두 취약점의 위치가 같은 경우는 주어지지 않습니다.취약 지점의 위치는 오름차순으로 정렬되어 주어집니다. weak의 원소는 0 이상 n - 1 이하인 정수입니다.
> 
> dist의 길이는 1 이상 8 이하입니다. dist의 원소는 1 이상 100 이하인 자연수입니다.

문제에서 원형의 벽이라고 제공을 했지만 직감적으로 이를 한줄로 만들고 거리까지는 어떻게 하면 되겠다 생각이 들었는데..... 조합이나 고민을 해도 아이디어가 잘 안떠오른 문제

weak와 dist 리스트의 길이는 15, 100 이하로 그렇게  길지 않다는 점 이는 완전 탐색을 사용해도 충분히 시도해볼 만하다는 뜻으로 볼 수 있다.

문제에서 요구하는 것은 '투입 해야하는 최소 친구 수'이다. 가능한 최대의 친구수는 8이고 1명부터 8명까지 모두 계산해보아도 총 8! = 40,320으로 그렇게 많지가 않다. 그러니 모든 친구의 경우의 수를 가정하고 친구를 최소 몇명을 배치하는지 확인하면 된다.

형태는 원형으로 주어져있다. 원형으로 나열된 데이터를 처리하는 경우에는 문제풀이를 간단하게 하기 위해 길이를 2배로 늘려서 원형을 일자 형태로 만드는 작업을 해주면 유리하다.

문제의 예시를 보자 3명의 친구 이동 거리는 3,5,7 취약 지점은 1,3,4,9,10이다.

먼저 취약한 지점을 2번 나열해서 원형을 일자 형태로 만들면 다음과 같다.

1,3,4,9,10,13,15,16,21,22

위에서 각 경우에 대해 4개의 취약지점을 모두 검사할 수 있는지 확인하면 된다. 예를 들어 친구를 나열하는 경우의 수 중에서 7,3,5를 확인해보자 이때 7을 이동할 수 있는 친구가 다음 9 지점에서 출발하여 7만 이동해도 모든 취약지점을 점검할 수 있다.

```py
from itertools import permutations 

def solution(n, weak, dist):
    #길이를 두배로 늘려서 '원형'을 일자 형태로 변형
    length = len(weak)
    for i in range(length):
        weak.append(weak[i]+n)
```

일단 순열이 필요하니 permutations을 불러옵시다.

그리고 weak에다가 원형을 일자로 표현하기 위해서 기존의 weak에다가 n을 쭉 더해줍시다.

```py
for start in range(length):
        #친구를 나열하는 모든 경우의 수 각각에 대하여 확인
        for friends in list(permutations(dist, len(dist))):
            count = 1 #친구를 투입할 수
            #해당 친구가 점검할 수 있는 마지막 위치
            position = weak[start] + friends[count - 1]
            #시작점부터 모든 취약 지점을 확인
```

첫번째 for문이 시작을 합니다. 결국 시작 지점이 될 수 있는 곳은 weak의 개수만큼이 될 것입니다.

permuations은 친구를 나열하는 모든 수를 구하는 것이고 이를 list로 반환해서 하나씩 뽑아보게 됩니다.

친구는 start 부터 position까지 점검을 수행할 수 있습니다.

그러니까 weak[시작] 부터해서 friends가 갈 수 있는 길이 까지가 됩니다. 다만 0부터 시작하는데 이를 맞춰쥑 위해서 -1을 합니다.

```py
for index in range(start, start+length):
    #점검할 수 있는 위치를 벗어난 경우
    if position < weak[index]:
        count += 1 #새로운 친구를 투입
        if count > len(dist): #더 투입이 불가능 하다면 종료
            break
        position = weak[index] + friends[count - 1]
    answer = min(answer, count) #최소값 계산
```

그러면 인덱스의 범위는 시작부터 시작+길이 까지 점검위치를 결정하게 됩니다.

점검할수 있는 위치를 벗어날 경우 count를 하나 더 투입을 해서 친구를 넣는데 이때 투입이 불가능 하다면 종료를 합니다.

다시 position을 쭉 확인하는 식으로 더해 갑니다.

```py
from itertools import permutations 

def solution(n, weak, dist):
    #길이를 두배로 늘려서 '원형'을 일자 형태로 변형
    length = len(weak)
    for i in range(length):
        weak.append(weak[i]+n)
    answer = len(dist) + 1
    #투입할 친구 수의 최솟값을 찾아야 하므로 len(dist) + 1로 초기화
    #0부터 length-1까지의 위치를 각각 시작점으로 설정
    for start in range(length):
        #친구를 나열하는 모든 경우의 수 각각에 대하여 확인
        for friends in list(permutations(dist, len(dist))):
            count = 1 #친구를 투입할 수
            #해당 친구가 점검할 수 있는 마지막 위치
            position = weak[start] + friends[count - 1]
            #시작점부터 모든 취약 지점을 확인
            for index in range(start, start+length):
                #점검할 수 있는 위치를 벗어난 경우
                if position < weak[index]:
                    count += 1 #새로운 친구를 투입
                    if count > len(dist): #더 투입이 불가능 하다면 종료
                        break
                    position = weak[index] + friends[count - 1]
            answer = min(answer, count) #최소값 계산
    
    if answer > len(dist):
        return -1
    
    return answer
```