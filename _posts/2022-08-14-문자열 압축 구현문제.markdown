---
title: 문자열 압축 구현문제
date:   2022-08-14 22:29:01 +0900
categories: [Coding_Test, 프로그래머스]
tags: [coding, python, algorithm, simulation]
---

[https://school.programmers.co.kr/learn/courses/30/lessons/60057?language=python3](https://school.programmers.co.kr/learn/courses/30/lessons/60057?language=python3)

> 데이터 처리 전문가가 되고 싶은 "어피치"는 문자열을 압축하는 방법에 대해 공부를 하고 있습니다. 최근에 대량의 데이터 처리를 위한 간단한 비손실 압축 방법에 대해 공부를 하고 있는데, 문자열에서 같은 값이 연속해서 나타나는 것을 그 문자의 개수와 반복되는 값으로 표현하여 더 짧은 문자열로 줄여서 표현하는 알고리즘을 공부하고 있습니다.
> 
> 간단한 예로 "aabbaccc"의 경우 "2a2ba3c"(문자가 반복되지 않아 한번만 나타난 경우 1은 생략함)와 같이 표현할 수 있는데, 이러한 방식은 반복되는 문자가 적은 경우 압축률이 낮다는 단점이 있습니다.
> 
> 예를 들면, "abcabcdede"와 같은 문자열은 전혀 압축되지 않습니다. "어피치"는 이러한 단점을 해결하기 위해 문자열을 1개 이상의 단위로 잘라서 압축하여 더 짧은 문자열로 표현할 수 있는지 방법을 찾아보려고 합니다.
> 
> 예를 들어, "ababcdcdababcdcd"의 경우 문자를 1개 단위로 자르면 전혀 압축되지 않지만, 2개 단위로 잘라서 압축한다면 "2ab2cd2ab2cd"로 표현할 수 있습니다. 다른 방법으로 8개 단위로 잘라서 압축한다면 "2ababcdcd"로 표현할 수 있으며, 이때가 가장 짧게 압축하여 표현할 수 있는 방법입니다.
> 
> 다른 예로, "abcabcdede"와 같은 경우, 문자를 2개 단위로 잘라서 압축하면 "abcabc2de"가 되지만, 3개 단위로 자른다면 "2abcdede"가 되어 3개 단위가 가장 짧은 압축 방법이 됩니다. 이때 3개 단위로 자르고 마지막에 남는 문자열은 그대로 붙여주면 됩니다.압축할 문자열 s가 매개변수로 주어질 때, 위에 설명한 방법으로 1개 이상 단위로 문자열을 잘라 압축하여 표현한 문자열 중 가장 짧은 것의 길이를 return 하도록 solution 함수를 완성해주세요.

아이디어는 분명 그렇게 어렵지 않게 생각 할 수 있었으나 이상한곳에 한번 꽂힌 다음에 하루종일 고민했지만 답을 찾지 못했다.

일단 내 생각의 흐름은 이렇게 갔다.

일단 1부터 N/2까지 문자열 압축 방법을 고려해야한다. N/2보다 크게 자른다면 의미가 없다(그렇게 안잘라진다)

두번째는 하나씩 합치는 과정으로 나가야 한다. 그리고 문자열의 길이를 체크하는 곳도 만들도 이를 가지고 문자열의 길이를 고려해야하지 않을까?

그래서 다시 정리를 하면 aabbaccc 있다면

```py
[['a', 1],
 ['a', 1],
 ['b', 1],
 ['b', 1],
 ['a', 1],
 ['c', 1],
 ['c', 1],
 ['c', 1]]
```

이렇게 자르고 첫번째랑 두번째가 같아지니 합치고 이렇게 쭉 돌려서 숫자를 카운트하면

```py
[['a', 2],
 [ 'b', 2],
 [ 'a', 1],
 ['c', 3]]
```
결과적으로는 이렇게 나올 것이다. 2+2+1+2 = 7 이거를 1부터 N/2까지 반복을 해서 가장 작은 것을 하면 하면....

라고 생각을 했는데..... 

뭔가 머리로 생각한거랑 코드가 결국 안나와서 꼬박 하루 고민하고 답지 봤다 ㅠ

```py
def solution(s):
    answer = len(s)
    #1개 단위(step)부터 압축 단위를 늘려가며 확인
    for step in range(1, len(s)//2+1):
        compressed = ""
        prev = s[0:step] #앞에서부터 step만큼의 문자열 추출
        count = 1
        #단위(step) 크기만큼 증가시키며 이전 문자열과 비교
        for j in range(step, len(s), step):
            #이전 상태와 동일하다면 압축 횟수(count) 증가
            if prev == s[j:j+step]:
                count += 1
            #다른 문자열이 나왔다면(더이상 압축하지 못한다면)
            else:
                compressed += str(count) + prev if count >=2 else prev
                prev =s[j:j+step] #다시 상태 초기화
                count = 1
        #남아 있는 문자열에 대해서 처리
        compressed += str(count) + prev if count >=2 else prev
        #만들어지는 압축 문자열이 가장 짧은 것이 정답
        answer = min(answer, len(compressed))
    return answer
```
 
```py
for step in range(1, len(s)//2+1):
```
일단 여기서도 1번부터 N/2까지 확인을 합니다. 다만 len(s)//2+1 부분에 대해서는 약간 의문이 듭니다.

예를 들어서 길이가 11일때 2로 나눈다면 5.5가 될것이고 내림을 하면 5가 되고 5x2 + 1이 되지만 11을 2로 나누고 1을 더해서 6을 만든다면 어차피 6으로 먼저 나누고 남는것은 5가 되서 압축이 되나 싶었습니다.

그래도 이부분을 고치면 에러가 나니 그런갑다 하지만 테스트 케이스를 정확하게 모르니 궁금하네요

```py
compressed = ""
prev = s[0:step] #앞에서부터 step만큼의 문자열 추출
count = 1
```
compressed에 압축한 문자열을 넣고 prev는 문자열을 끊어서 넣어주고 count는 문자열이 몇번 압축이 되었는지 확인합니다.

```py
for j in range(step, len(s), step):
```

range(시작숫자, 종료숫자, step)
일단 맨 첫번째 문자열은 들어갔습니다. 그리고 두번째 문자열부터 이중 for문이 시작합니다. 그리고 그 단위만큼 j를 돌리게 됩니다.

```py
if prev == s[j:j+step]:
      count += 1
```

앞선 문자열과 동일한 결과를 얻었습니다. count를 하나 증가하고 다음 문자열을 확인합니다.

```py
else:
     compressed += str(count) + prev if count >=2 else prev
     prev =s[j:j+step] #다시 상태 초기화
     count = 1
```

다를 경우에 압축된 문자열에다가 더해 줄려고 합니다.

일단 count는 몇번 압축되었는지 그리고 앞선 prev를 더하는데 만약 count가 2일때만 더하며 아니라면 prev만 들어갑니다.

그러니까 한번 압축된경우에는 숫자를 더할 필요가 없기 때문입니다.

if 컴프리헨션이 잘 적응이 안될지도 모르는데 익숙해지시면 좋은점이 많습니다.

그리고 prev는 다시 셋팅을 하고 count도 마찬가지 입니다.

```py
#남아 있는 문자열에 대해서 처리
compressed += str(count) + prev if count >=2 else prev
#만들어지는 압축 문자열이 가장 짧은 것이 정답
answer = min(answer, len(compressed))
```

이중 for문이 끝난뒤의 남은 문자열을 처리를 하고

가장 작은 값을 반환을 해줍니다.


그리고 다시 다음 문자열 길이로 자르는 과정을 반복하게 됩니다.


저는 일단 생각한 크기만큼 다 분리를 하고 합쳐나가는 식으로 생각을 했는데 너무 어렵게 접근한거 같습니다.