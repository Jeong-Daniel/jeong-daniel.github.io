---
title: 연산자 끼워넣기 백준 14888번 구현
date:   2022-08-29 15:10:30 +0900
categories: [Coding_Test, 백준]
tags: [coding, python, algorithm, implement]
---

[https://www.acmicpc.net/problem/14888](https://www.acmicpc.net/problem/14888)

> 문제
> N개의 수로 이루어진 수열 A1, A2, ..., AN이 주어진다. 또, 수와 수 사이에 끼워넣을 수 있는 N-1개의 연산자가 주어진다. 연산자는 덧셈(+), 뺄셈(-), 곱셈(×), 나눗셈(÷)으로만 이루어져 있다.
> 
> 우리는 수와 수 사이에 연산자를 하나씩 넣어서, 수식을 하나 만들 수 있다. 이때, 주어진 수의 순서를 바꾸면 안 된다.
> 
> 예를 들어, 6개의 수로 이루어진 수열이 1, 2, 3, 4, 5, 6이고, 주어진 연산자가 덧셈(+) 2개, 뺄셈(-) 1개, 곱셈(×) 1개, 나눗셈(÷) 1개인 경우에는 총 60가지의 식을 만들 수 있다. 예를 들어, 아래와 같은 식을 만들 수 있다.
> 
> 1+2+3-4×5÷6
> 1÷2+3+4-5×6
> 1+2÷3×4-5+6
> 1÷2×3-4+5+6
> 식의 계산은 연산자 우선 순위를 무시하고 앞에서부터 진행해야 한다. 또, 나눗셈은 정수 나눗셈으로 몫만 취한다. 음수를 양수로 나눌 때는 C++14의 기준을 따른다. 즉, 양수로 바꾼 뒤 몫을 취하고, 그 몫을 음수로 바꾼 것과 같다. 이에 따라서, 위의 식 4개의 결과를 계산해보면 아래와 같다.
> 
> 1+2+3-4×5÷6 = 1
> 1÷2+3+4-5×6 = 12
> 1+2÷3×4-5+6 = 5
> 1÷2×3-4+5+6 = 7
> N개의 수와 N-1개의 연산자가 주어졌을 때, 만들 수 있는 식의 결과가 최대인 것과 최소인 것을 구하는 프로그램을 작성하시오.

---

... 이상하다. 내가 이 문제를 풀었던 기억이 대충났는데 어디였는지는 모르겠다. 프로그래머스 카카오문제집이었나 리트코드였나. 흠... 아무튼 그냥 DFS로 정말 간단하게 풀었던거 같다.

```py
n = int(input())
data = list(map(int, input().split()))
add, sub, mul, div = map(int, input().split())

# 최댓값과 최솟값 초기화
max_value = -1e9
min_value = 1e9

# dfs 매서드 정의
def dfs(i, arr):
    global add, sub, mul, div, max_value, min_value
    # 주어진 수열을 다 받았을 경우 최댓값과 최솟값 계산
    if i == n:
        max_value = max(max_value, arr)
        min_value = min(min_value, arr)
    else:
        # 더하기
        if add > 0:
            add -= 1
            dfs(i+1, arr + data[i])
            add += 1
        # 빼기
        if sub > 0:
            sub -= 1
            dfs(i+1, arr - data[i])
            sub += 1
        # 곱하기
        if mul > 0:
            mul -= 1
            dfs(i+1, arr * data[i])
            mul += 1
        # 나누기
        if div > 0:
            div -= 1
            dfs(i+1, int(arr / data[i]))
            div += 1

            
# DFS 메서드 호출
dfs(1, data[0])

# 최댓값과 최솟값 출력
print(max_value)
print(min_value)
```

일일이 모든 조건의 연산을 만들고 시작하는 것이 아니라 DFS 재귀를 이용하면 만들 수 있습니다.

(는 뭔가 익숙하다 했더니 전에 풀어 봤구나...)