---
title: 괄호 변환 프로그래머스 자료구조
date:   2022-08-17 20:45:10 +0900
categories: [Coding_Test, 프로그래머스]
tags: [coding, python, algorithm, simulation]
---

[https://school.programmers.co.kr/learn/courses/30/lessons/60058](https://school.programmers.co.kr/learn/courses/30/lessons/60058)

> 용어의 정의
> 
> '(' 와 ')' 로만 이루어진 문자열이 있을 경우, '(' 의 개수와 ')' 의 개수가 같다면 이를 균형잡힌 괄호 문자열이라고 부릅니다.그리고 여기에 '('와 ')'의 괄호의 짝도 모두 맞을 경우에는 이를 올바른 괄호 문자열이라고 부릅니다.
> 
> 예를 들어, "(()))("와 같은 문자열은 "균형잡힌 괄호 문자열" 이지만 "올바른 괄호 문자열"은 아닙니다.반면에 "(())()"와 같은 문자열은 "균형잡힌 괄호 문자열" 이면서 동시에 "올바른 괄호 문자열" 입니다.
> 
> '(' 와 ')' 로만 이루어진 문자열 w가 "균형잡힌 괄호 문자열" 이라면 다음과 같은 과정을 통해 "올바른 괄호 문자열"로 변환할 수 있습니다.
> 
> 1. 입력이 빈 문자열인 경우, 빈 문자열을 반환합니다.
> 
> 2. 문자열 w를 두 "균형잡힌 괄호 문자열" u, v로 분리합니다. 단, u는 "균형잡힌 괄호 문자열"로 더 이상 분리할 수 없어야 하며, v는 빈 문자열이 될 수 있습니다.
> 
> 3. 문자열 u가 "올바른 괄호 문자열" 이라면 문자열 v에 대해 1단계부터 다시 수행합니다.
> 3-1. 수행한 결과 문자열을 u에 이어 붙인 후 반환합니다.
> 
> 4. 문자열 u가 "올바른 괄호 문자열"이 아니라면 아래 과정을 수행합니다.
> 4-1. 빈 문자열에 첫 번째 문자로 '('를 붙입니다.
> 4-2. 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다.
> 4-3. ')'를 다시 붙입니다.
> 4-4. u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다.
> 4-5. 생성된 문자열을 반환합니다.
> 
> "균형잡힌 괄호 문자열"  p가 매개변수로 주어질 때, 주어진 알고리즘을 수행해 "올바른 괄호 문자열" 로 변환한 결과를 return 하도록 solution 함수를 완성해 주세요.

input / output
|"(()())()"|"(()())()"|
|---|---|
|")("|"()"|
|"()))((()"|"()(())()"|

원래 이런 류의 괄호맞추기 문제는 주로 스택 개념을 설명할때 나오던 것이었습니다.

괄호를 넣다가 서로 매치가 된다면 pop을 하는 식으로 제거를 하고 스택에 남은 문자열이 없다면 완전한 형태이고 그게 아니라면 에러를 반환하는 식인데

여기서는 한발 더 나아가서 그렇다면 올바르게 교정을 해보아라 까지 나왔습니다.

일단 이게 성공인가 실패인가 구분을하고, 성공했다면 그대로 반환을 하고 실패를 했다면 어디서 잘못되었는지 찾아가면 되겠다는 생각이지만.... 흠....

알고리즘 자체는 제시된 기준으로 재귀적으로 구현해서 해결할 수 있다고 합니다. 구현을 위한 알고리즘 자체는 문제에 그대로 제시되어 있기 때문에 재귀 함수를 이용하여 문제에 기재되어 있는 알고리즘을 안정적으로 구현하면 된다고 합니다.

그리고 이 문제는 DFS문제는 아니지만 DFS알고리즘의 핵심으로 사용하는 재귀함수 구현을 요구한다는 점에서 DFS연습 목적의 문제로 다루게 되었습니다.

어느 재귀문제가 그렇듯이 재귀를 사용하게되면 코드가 복잡해지고 시간복잡도가 반복문에 비해 계산이 어렵다는 점입니다. 코드가 복잡해진다는 뜻은 가시성이 떨어진다기 보다는 코드가 어떻게 동작하는지 한눈에 파악되지 않는 다는 것입니다. 제가 지난번에 작성항 몇가지 코딩 테스트에서 재귀적으로 들어갈때 어떤 식이겠다라는 감은 와도 직접적으로 동작이 어떠한지 쉽게 상상이 안가는 것들도 있을 것입니다.

이렇듯 재귀 문제의 경우 최대한 단순하게 구성하는 것이 좋습니다 특정 문자열에서 균형잡힌 괄호 문자열의 인덱스를 반환하는 함수와 특정한 균형잡힌 괄호 문자열이 올바른 괄호 문자열인지 판단하는 메서드를 별도로 구현하고 이후 재귀 함수에서 이 두 함수를 불러오도록 소스코드를 작성할 수 있습니다.

```py
#'균형잡힌 괄호 문자열'의 인덱스 반환
def balanced_index(p):
    count = 0 #왼쪽 괄호의 개수
    for i in range(len(p)):
        if p[i] == '(':
            count += 1
        else:
            count -= 1
        if count == 0:
            return i
```

앞서 말한것 처럼 solution 함수 하나만 사용하는 것이 아니라 상황에 따른 함수를 만들고 불러오는 방식입니다.

 
균형잡힌 괄호 문자열의 인덱스 반환

첫번째는 문자열 p가 들어왔을때 처음부터 길이 p까지 확인을 하는데 만약 열림 괄호가 왔다면 1을 열고 아니라면 1을 닫기를 반복을 합니다. 만약 괄호가 완전하게 닫혔다면 돌고 있는 for문에서 i를 반환하게 됩니다.

```py
#'올바른 괄호 문자열'인지 판단
def check_proper(p):
    count = 0 #왼쪽 괄호의 개수
    for i in p:
        if i == '(':
            count += 1
        else:
            if count == 0: #쌍이 맞지 않는 경우에 False 전환
                return False
            count -= 1
    return True #쌍이 맞는 경우에 True반환
```

다음으로 올바른 괄호 문자열인지 판단을 합니다.

마찬가지로 i부터 p까지 순회를 하는데 리스트에서 뽑는 방식이 아니라 문자열 p에서 바로 뽑아서 확인을 하게 됩니다. 여는괄호의 경우 count를 더해두고 아닐때 count가 0이라면 False를 반환하고 count가 0이 아니라면 1을 빼게 됩니다. 이렇게 쭉 돌렸을때 쌍이 맞다면 True를 반환합니다.

```py
def solution(p):
    answer = ''
    if p == '':
        return answer
    index = balanced_index(p)
    u = p[:index+1]
    v = p[index+1:]
    # "올바른 괄호 문자열"이면 v에 대해 함수를 수행한 결과를 붙여 반환
    if check_proper(u):
        answer = u+solution(v)
    #'올바른 괄호 문자열'이 아니라면 아래의 과정을 수행
    else:
        answer = '('
        answer += solution(v)
        answer += ')'
        u = list(u[1:-1]) #첫번 째와 마지막 문자를 제거
        for i in range(len(u)):
            if u[i] == '(':
                u[i] = ')'
            else:
                u[i] = '('
        answer += "".join(u)
    return answer
```

마지막 해결부분의 함수입니다.

앞에서 이야기를 다 해주었습니다. 다시 문제를 봅시다.

---

1. 입력이 빈 문자열인 경우, 빈 문자열을 반환합니다.
if p == '': return answer 이 되겠네요

2. 문자열 w를 두 "균형잡힌 괄호 문자열" u, v로 분리합니다.
index = balanced_index(p)
u = p[:index+1]
v = p[index+1:]
균형잡힌 괄호 문자열로 분리를 합니다.

단, u는 "균형잡힌 괄호 문자열"로 더 이상 분리할 수 없어야 하며, v는 빈 문자열이 될 수 있습니다.

3. 문자열 u가 "올바른 괄호 문자열" 이라면 문자열 v에 대해 1단계부터 다시 수행합니다.
3-1. 수행한 결과 문자열을 u에 이어 붙인 후 반환합니다.
if check_proper(u): ->  "올바른 괄호 문자열" 이라면
answer = u+solution(v) -> 수행한 결과 문자열을 u에 이어 붙인 후 반환

4. 문자열 u가 "올바른 괄호 문자열"이 아니라면 아래 과정을 수행합니다.
else:
4-1. 빈 문자열에 첫 번째 문자로 '('를 붙입니다.
answer = '('
4-2. 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다.
answer += solution(v)
4-3. ')'를 다시 붙입니다.
answer += ')'
4-4. u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다.
u = list(u[1:-1])
for i in range(len(u)):
if u[i] == '(': u[i] = ')'
else: u[i] = '(' 
4-5. 생성된 문자열을 반환합니다.
answer += "".join(u)

---

설명을 그대로 코드로 옮긴것 뿐입니다.

결과를 반환한 answer을 정해주고 최초의 문자열 p가 더 남아있지 않다면 answer을 반환하게 됩니다.

일단 균형잡힌 괄호 문자열의 인덱스 반환 함수로 인덱스를 설정을 합니다. 그리고 그 인덱스를 기준으로 문자열을 u와 v로 나누게 됩니다.


올바른 괄호 문자열인치 체크를하고 올바르다면 u+solution(v)로 재귀적으로 쭉 붙여 나가게 됩니다.

u가 올바르지 않다면 v를 두고 괄호를 앞뒤로 붙이게 되고 u의 첫번째와 마지막 문제를 제거합니다.