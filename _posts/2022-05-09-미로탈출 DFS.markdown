---
title: 미로 탈출 DFS
date:   2022-05-10 18:58:41 +0900
categories: [Coding_Test, Others]
tags: [coding, python, algorithm, dfs]
---

N x M 크기의 직사각형 형태의 괴물이 들어있는 미로가 있다. 현재 위치는 (1,1)이고 출구는 (N,M)위치에 존재하며 한번ㅇ네 한 칸 씩 이동 할 수 있다. 이때 괴물이 있는 부분은 0으로, 괴물이 없는 부분은 1로 표시되어 있다. 미로는 반드시 탈출할 수 있는 형태로 제시된다. 동빈이가 탈출하기 위해 움직여야하는 최소칸의 개수를 구해보자

 

BFS를 이용해서 이동가능한 칸마다 1을 더해가면서 움직여보자


```python
#미로탈출
from collections import deque

#N,M을 공백으로 구분하여 입력받기
n, m = map(int, input().split())
#2차원 리스트의 맵 정보 입력받기
graph = []
for i in range(n):
    graph.append(list(map(int, input())))
    
#이동할 네 방햐으이 정의(상하좌우)
dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

#BFS소스코드 구현
def bfs(x, y):
    #큐(Queue) 구현을 위해 deque 라이브러리 사용
    queue = deque()
    queue.append((x,y))
    #큐가 빌 때 까지 반복
    while queue:
        x, y = queue.popleft()
        #현재 위치에서 네 방향으로의 위치 확인
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            #미로 찾기 공간을 벗어난 경우 무시
            if nx < 0 or ny <0 or nx >= n or ny >= m:
                continue
            #벽인 경우 무시
            if graph[nx][ny] == 0:
                continue
            #해당 노드를 처음 방문하는 경우에만 최단 거리 기록
            if graph[nx][ny] == 1 :
                graph[nx][ny] = graph[x][y] + 1
                queue.append((nx,ny))
    #가장 오른쪽 아래까지의 최단 거리 반환
    return graph[n-1][m-1]

#BFS를 수행한 결과 출력
print(bfs(0,0))
```

![result image](https://user-images.githubusercontent.com/85277660/210164694-588691ff-0cef-47ec-8808-f551466850da.png)
